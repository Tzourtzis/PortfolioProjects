-- Created a table named "initial" in the public schema to store ride data
CREATE TABLE public."initial" (
    ride_id VARCHAR(50) PRIMARY KEY,
    rideable_type VARCHAR(50),
    started_at TIMESTAMP,
    ended_at TIMESTAMP,
    start_station_name VARCHAR(100),
    start_station_id VARCHAR(50),
    end_station_name VARCHAR(100),
    end_station_id VARCHAR(50),
    start_lat NUMERIC,
    start_lng NUMERIC,
    end_lat NUMERIC,
    end_lng NUMERIC,
    member_casual VARCHAR(50)
);

-- Created a table named "Load" in the public schema to store ride data
CREATE TABLE "public"."Load" (
    ride_id VARCHAR(50) PRIMARY KEY,
    rideable_type VARCHAR(50),
    started_at TIMESTAMP,
    ended_at TIMESTAMP,
    start_station_name VARCHAR(100),
    start_station_id VARCHAR(50),
    end_station_name VARCHAR(100),
    end_station_id VARCHAR(50),
    start_lat NUMERIC,
    start_lng NUMERIC,
    end_lat NUMERIC,
    end_lng NUMERIC,
    member_casual VARCHAR(50)
);

-- Copied data from "initial" table to "Load" table in the Staging schema
SELECT *
into "Staging"."Load"
FROM public."initial";

-- Added primary key constraint to the "Load" table
ALTER TABLE "Staging"."Load" ADD PRIMARY KEY (ride_id);

-- Checked for NULL values in specific columns of the "initial" table
SELECT
    SUM(CASE WHEN ride_id IS NULL THEN 1 ELSE 0 END) AS ride_id_null_count,
    SUM(CASE WHEN rideable_type IS NULL THEN 1 ELSE 0 END) AS rideable_type_null_count,
    SUM(CASE WHEN started_at IS NULL THEN 1 ELSE 0 END) AS started_at_null_count,
    SUM(CASE WHEN ended_at IS NULL THEN 1 ELSE 0 END) AS ended_at_null_count,
    SUM(CASE WHEN start_station_name IS NULL THEN 1 ELSE 0 END) AS start_station_name_null_count,
    SUM(CASE WHEN start_station_id IS NULL THEN 1 ELSE 0 END) AS start_station_id_null_count,
    SUM(CASE WHEN end_station_name IS NULL THEN 1 ELSE 0 END) AS end_station_name_null_count,
    SUM(CASE WHEN end_station_id IS NULL THEN 1 ELSE 0 END) AS end_station_id_null_count,
    SUM(CASE WHEN start_lat IS NULL THEN 1 ELSE 0 END) AS start_lat_null_count,
    SUM(CASE WHEN start_lng IS NULL THEN 1 ELSE 0 END) AS start_lng_null_count,
    SUM(CASE WHEN end_lat IS NULL THEN 1 ELSE 0 END) AS end_lat_null_count,
    SUM(CASE WHEN end_lng IS NULL THEN 1 ELSE 0 END) AS end_lng_null_count,
    SUM(CASE WHEN member_casual IS NULL THEN 1 ELSE 0 END) AS member_casual_null_count
FROM
    "public"."initial";

-- Truncated the data in the "Load" table
TRUNCATE TABLE "Staging"."Load";

-- Created a table named "stations" in the Core schema to store station data
SELECT 
    COALESCE(cs.station_name, 'Unknown') as station_name,
	avg(cs.latitude) as latitude,
	avg(cs.longtitude) as longtitude
INTO "Core".stations
FROM (
    SELECT 
        start_station_name AS station_name,
        start_lat as latitude,
        start_lng as longtitude
    FROM "public"."initial"
    UNION
    SELECT 
        end_station_name AS station_name,
        end_lat as latitude,
        end_lng as longtitude
    FROM "public"."initial"
) AS cs
GROUP BY cs.station_name
order by cs.station_name;

-- Added primary key to the "stations" table
ALTER TABLE "Core".stations
ADD station_PK integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 ),
ADD Primary Key (station_PK);

-- Inserted missing stations into the "stations" table
SELECT 
    COALESCE(cs.station_name, 'Unknown') as station_name,
	avg(cs.latitude) as latitude,
	avg(cs.longtitude) as longtitude,
	c.station_name
FROM (
    SELECT 
        start_station_name AS station_name,
        start_lat as latitude,
        start_lng as longtitude
    FROM "Staging"."Load"
    UNION
    SELECT 
        end_station_name AS station_name,
        end_lat as latitude,
        end_lng as longtitude
    FROM "Staging"."Load"
) AS cs
LEFT JOIN "Core"."stations" as c
	on COALESCE(cs.station_name, 'Unknown') = c.station_name
WHERE c.station_name IS NULL
GROUP BY cs.station_name, c.station_name
order by cs.station_name;

-- Created a table named "profiles" in the Core schema to store distinct bike and user types
Select distinct
    rideable_type as bike_type,
    member_casual as user_type
into "Core"."profiles"
FROM 
    "public"."initial";

-- Added primary key to the "profiles" table
ALTER TABLE "Core".profiles
ADD profile_PK integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 ),
ADD Primary Key (profile_PK);

-- Created a table named "rides" in the Core schema to store ride data with relevant foreign keys
SELECT 
	st.started_at as started_at,
	cs1.station_pk as start_station_pk,
	st.ended_at,
	cs2.station_pk as end_station_pk,
	cp.profile_pk,
	(st.ended_at - st.started_at) as trip_duration
into "Core".rides
from "public"."initial" as st
left join "Core"."profiles" as cp 
	on st.member_casual = cp.user_type AND st.rideable_type = cp.bike_type
left join "Core"."stations" as cs1
	on COALESCE(st.start_station_name, 'Unknown') = cs1.station_name
left join "Core"."stations" as cs2
	on COALESCE(st.end_station_name, 'Unknown') = cs2.station_name
where (st.ended_at - st.started_at) between '00:01:00' and '23:59:59'
order by st.started_at;

-- Added primary key to the "rides" table
ALTER TABLE "Core".rides
ADD ride_pk integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 ),
ADD Primary Key (ride_pk);
